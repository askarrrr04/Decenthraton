from ultralytics import YOLO
import cv2
import os
import sys

# –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
state_model_path = r"C:\Users\askar\Desktop\indrive code\runs\detect\train\weights\best.pt"   # —É–¥–∞—Ä—ã/—Ü–∞—Ä–∞–ø–∏–Ω—ã
parts_model_path = r"C:\Users\askar\Desktop\indrive code\runs\segment\train4\weights\best.pt"   # –¥–µ—Ç–∞–ª–∏ –º–∞—à–∏–Ω—ã
dirt_model_path  = r"C:\Users\askar\Desktop\indrive code\runs\train\car_dirt_m2\weights\best.pt"  # –≥—Ä—è–∑—å

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
state_model = YOLO(state_model_path)
parts_model = YOLO(parts_model_path)
dirt_model  = YOLO(dirt_model_path)

save_dir = r"C:\Users\askar\Desktop\indrive code\runs\predict_combined"
os.makedirs(save_dir, exist_ok=True)

def process_image(image_path):
    img = cv2.imread(image_path)
    
    # –î–µ—Ç–∞–ª–∏ –º–∞—à–∏–Ω—ã
    parts_results = parts_model.predict(img, imgsz=512)
    parts = []
    for r in parts_results:
        for box in r.boxes:
            parts.append({
                "name": r.names[int(box.cls)],
                "xyxy": box.xyxy[0].tolist()  # [x1, y1, x2, y2]
            })
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
    state_results = state_model.predict(img, imgsz=512)
    damaged_parts = []
    for r in state_results:
        for box in r.boxes:
            x1, y1, x2, y2 = box.xyxy[0].tolist()
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
            for part in parts:
                px1, py1, px2, py2 = part["xyxy"]
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
                if not (x2 < px1 or x1 > px2 or y2 < py1 or y1 > py2):
                    damaged_parts.append((part["name"], r.names[int(box.cls)]))
    
    # –ì—Ä—è–∑—å/—á–∏—Å—Ç–æ
    dirt_results = dirt_model.predict(img, imgsz=512)
    dirt_state = "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    for r in dirt_results:
        if len(r.boxes) > 0:
            dirt_state = "–ì—Ä—è–∑–Ω–æ"
        else:
            dirt_state = "–ß–∏—Å—Ç–æ"
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ
    print("üîß –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:")
    if damaged_parts:
        for name, damage in damaged_parts:
            print(f"  {name} ({damage})")
    else:
        print("  –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    print("üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—è–∑–∏/—á–∏—Å—Ç–æ:")
    print(f"  {dirt_state}")
    
    # –†–∏—Å—É–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    for part_name, damage in damaged_parts:
        for part in parts:
            if part["name"] == part_name:
                x1, y1, x2, y2 = map(int, part["xyxy"])
                cv2.rectangle(img, (x1, y1), (x2, y2), (0,0,255), 2)
                cv2.putText(img, f"{part_name} ({damage})", (x1, y1-5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,0,255), 2)
    cv2.putText(img, f"–ì—Ä—è–∑—å: {dirt_state}", (10,30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (255,0,0), 2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    save_path = os.path.join(save_dir, os.path.basename(image_path))
    cv2.imwrite(save_path, img)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Error: No image path provided")
        sys.exit(1)
    
    image_path = sys.argv[1]
    process_image(image_path)